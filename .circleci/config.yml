version: 2.1

filter_all: &filter_all
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

filter_demo: &filter_demo
  filters:
    branches:
      only: main
    tags:
      only: demo

filter_prod: &filter_prod
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+/

workflows:
  test-and-deploy:
    jobs:
      - build:
          <<: *filter_all
      - test_nginx:
          <<: *filter_all
      - test:
          <<: *filter_all
          requires:
            - build
      - test_cypress:
          <<: *filter_all
          requires:
            - build
      - deploy:
          name: Deploy (demo)
          context: "AWS Deploy"
          <<: *filter_demo
          tag: demo
          requires:
            - test
            - test_nginx
            - test_cypress
      - deploy:
          name: Deploy (prod)
          context: "AWS Deploy"
          env: prod
          <<: *filter_prod
          requires:
            - test
            - test_nginx
            - test_cypress
      - cf-function-deploy:
          name: Deploy CloudFront Functions (demo)
          context: "AWS Deploy"
          env: demo
          <<: *filter_demo
          requires:
            - test
            - test_nginx
            - test_cypress
            - "Deploy (demo)"
      - cf-function-deploy:
          name: Deploy CloudFront Functions (prod)
          context: "AWS Deploy"
          env: prod
          <<: *filter_prod
          requires:
            - test
            - test_nginx
            - test_cypress
            - "Deploy (prod)"

jobs:
  # Note (allie): This is its own job because I don't
  # want to run the tests in an environment that has the
  # built project.
  build:
    executor: default
    steps:
      - checkout
      - setup_npmrc
      - run:
          name: install dependencies
          command: |
            npm ci
      - save_cache:
          key: v3-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - /root/.cache/Cypress
      - run:
          name: Assert that it builds
          command: |
            npm run build

  test:
    executor: default
    steps:
      - checkout
      - restore_cache:
          key: v3-deps-{{ checksum "package-lock.json" }}
      # run test suite
      - run:
          name: Run unit tests
          command: |
            npx nuxi prepare
            npm run test

  test_cypress:
    executor: default
    steps:
      - checkout
      - restore_cache:
          key: v3-deps-{{ checksum "package-lock.json" }}
      # run test suite
      - run:
          name: Run unit tests
          command: |
            npx nuxi prepare
            npm run test-cypress-ci

  test_nginx:
    docker:
      - image: node:18.18.0-slim
    parameters:
      env:
        type: enum
        default: "demo"
        enum: ["demo", "prod"]
      tag:
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Test NGINX
          environment:
            ENV: <<parameters.env>>
          command: |
            apt-get update && \
            apt-get install -y nginx-extras
            mkdir -p /app/nginx
            cp ./nginx/*.conf /etc/nginx/
            nginx -t

  deploy:
    docker:
      - image: circleci/python:3.8
    parameters:
      env:
        type: enum
        default: "demo"
        enum: ["demo", "prod"]
      tag:
        type: string
        default: ""
    steps:
      - checkout
      - setup_npmrc
      - setup_remote_docker:
          version: 20.10.12
      - run:
          name: Deploy
          environment:
            ENV: <<parameters.env>>
            TAG: <<parameters.tag>>
            ROLE: gothamist-vue3-<<parameters.env>>
          command: |
            TAG=${TAG:-$CIRCLE_TAG}

            python3 -m venv ~/.venv
            source ~/.venv/bin/activate
            pip3 install -U git+https://github.com/nypublicradio/nyprsetuptools.git

            nyprsetuptools DockerDeploy \
              --fargate \
              --cpu=2048 \
              --memory-reservation=4096 \
              --ecr-repository=gothamist-vue3 \
              --ecs-cluster=gothamist-vue3 \
              --ports=80 \
              --execution-role=$ROLE \
              --task-role=$ROLE \
              --environment=$ENV \
              --tag=$TAG \
              --wait=300

  cf-function-deploy:
    working_directory: ~/project/cf_functions
    executor: aws-cli/default
    parameters:
      env:
        type: enum
        default: "demo"
        enum: ["demo", "prod"]
    steps:
      - checkout:
          path: ~/project
      - aws-cli/setup
      - run:
          name: Deploy
          environment:
            ENV: <<parameters.env>>
          command: |
            for x in *.js; do 
              functionName=$(basename $x .js)
              aws cloudfront describe-function --name $functionName-$ENV > /dev/null 2>&1
              if [[ $? == 0 ]]; then
                etag=$(aws cloudfront describe-function --name $functionName-$ENV --query 'ETag' --output text)
                aws cloudfront update-function \
                  --name $functionName-$ENV \
                  --function-config Comment="$functionName",Runtime="cloudfront-js-1.0" \
                  --if-match $etag \
                  --function-code fileb://$x
              else
                aws cloudfront create-function \
                  --name $functionName-$ENV \
                  --function-config Comment="$functionName",Runtime="cloudfront-js-1.0" \
                  --function-code fileb://$x
              fi
            done
      - run:
          name: Publish Functions
          environment:
            ENV: <<parameters.env>>
          command: |
            for x in *.js; do 
              functionName=$(basename $x .js)
              etag=$(aws cloudfront describe-function --name $functionName-$ENV --query 'ETag' --output text)
              aws cloudfront publish-function \
                --name $functionName-$ENV \
                --if-match $etag
            done

commands:
  setup_npmrc:
    steps:
      - run:
          name: Setup .npmrc
          command: |
            echo "@nypublicradio:registry=https://npm.pkg.github.com" > .npmrc
            echo "//npm.pkg.github.com/:_authToken=$PAT" >> .npmrc

executors:
  default:
    docker:
      - image: cypress/browsers:node-18.16.1-chrome-114.0.5735.133-1-ff-114.0.2-edge-114.0.1823.51-1
    environment:
      JOBS: 2

orbs:
  aws-cli: circleci/aws-cli@3.1.5