include /etc/nginx/modules-enabled/*;
worker_processes  1;
error_log  /dev/stdout warn;

env ENV;

events {
    worker_connections 4096;
}

http {
    include       mime.types;
    default_type  text/html;

    # requied for shared_lua_dict
    variables_hash_max_size 4096;
    map_hash_bucket_size 128;

    # hide the version in the Server header
    server_tokens off;

    # use real client ip rather than ALB address
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    real_ip_header X-Forwarded-For;

    # apache-style combined log format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent"';

    access_log  /dev/stdout  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  130;
    gzip  on;

    # microcaching
    # The proxy_cache_path will be used to store responses for 1s on select
    # endpoints. This improves performance with minimal impact.
    proxy_cache_path /tmp/cache keys_zone=cache:10m levels=1:2 inactive=600s max_size=100m;
    # This line tells nginx to intercept any 4xx or 5xx code that is returned by a proxy_pass
    # directive and resolve it using its error_page directive. We use this to set a fallback
    # from vue to ember.
    proxy_intercept_errors on;

    lua_shared_dict upstream 24k;
    init_by_lua_block {
        local env = os.getenv("ENV");
        ngx.shared.upstream:set("env", env)
        ngx.log(ngx.WARN, "Starting Gothamist Vue web client Nginx with ENV=" .. env)
    }

    upstream app {
        server 0.0.0.0:3000 max_fails=0;
    }

    server {
        listen 80;
        server_name _;
        resolver 172.16.0.2 valid=60s;

        set_by_lua_block $cms_cdn {
            return "https://cdn.cms." .. ngx.shared.upstream:get("env") .. ".nypr.digital"
        }
        set_by_lua_block $cms_cdn_host {
            return "cdn.cms." .. ngx.shared.upstream:get("env") .. ".nypr.digital"
        }

        set_by_lua_block $wagtail_origin {
            return "https://cms." .. ngx.shared.upstream:get("env") .. ".nypr.digital"
        }
        set_by_lua_block $wagtail_host {
            return "cms." .. ngx.shared.upstream:get("env") .. ".nypr.digital"
        }
        set_by_lua_block $nuxt_host {
            return "gothamist-vue3." .. ngx.shared.upstream:get("env") .. ".nypr.digital"
        }
        set_by_lua_block $robots_file {
            return "/app/public/robots-" .. ngx.shared.upstream:get("env") .. ".txt"
        }
        location / {
            include headers.conf;
            include microcache.conf;
            proxy_pass http://app;
        }
        location = /robots.txt {
            alias $robots_file ;
        }
        # Legacy Redirects
        location = /about.php { return 301 https://sponsorship.wnyc.org/; }
        location = /advertising.php { return 301 https://sponsorship.wnyc.org/; }
        location = /author.php { return 301 /author/$arg_term/$arg_page; }
        location = /blog { return 301 /; }
        location = /cat.php { return 301 /; }
        location = /getaways.php { return 301 /; }
        location = /index { return 301 /; }
        location = /index.php { return 301 /; }
        location = /mediakit/gothamist.php { return 301 https://sponsorship.wnyc.org/; }
        location = /mediakit/index.php { return 301 https://sponsorship.wnyc.org/; }
        location = /mediakit/spec_rates.php { return 301 https://sponsorship.wnyc.org/; }
        location = /mobile.php { return 301 /$arg_page; }
        location = /pretty.php { return 301 /; }
        location ~ '^/sections/arts?[entertainment]?' { return 301 /arts-entertainment; }
        location ~* '/sections/arts & entertainment' { return 301 /arts-entertainment; }
        location = /tag.php { return 301 /tags/$arg_term/$arg_page; }

        location = /checkout { return 301 /; }
        location = /contribute { return 301 https://pledge.wnyc.org/support/gothamist/?utm_medium=partnersite&utm_source=gothamist&utm_campaign=contirbute-redirect; }
        location = /favorites { return 301 /labs/favorites; }
        location = /labs/map { return 301 /; }
        location = /submit { return 301 https://gothamist.submittable.com/submit/18730; }
        location = /turnout { return 301 https://project.gothamist.com/voter-turnout; }
        location = /tags/wethecommuters { return 301 /tags/we-the-commuters; }

        location = /atom.xml { return 301 https://gothamist.com/feed; }
        location = /index.rdf { return 301 https://gothamist.com/feed; }
        location = /index.xml { return 301 https://gothamist.com/feed; }
        location = /feed/ { return 301 https://gothamist.com/feed; }

        location ~ ^/archives/(.*)\.php$ { return 301 /$1.php; }
        location ~ ^/sections/(arts-entertainment|news|food) { return 301 /$1; }
        location ~ ^/blog[2-6]?\.php$ { return 301 /; }

        location ~ "^/author/(?:[A-Z][a-z]+\W?)*" {
          rewrite_by_lua_block {
            local path = string.gsub(ngx.var.uri, 'author', 'staff')
            path = string.lower(path)
            path = string.gsub(path, ' ', '-')
            return ngx.redirect("https://" .. ngx.var.host .. path, ngx.HTTP_MOVED_PERMANENTLY)
          }
        }
         
        # site map
        location ~ "^/sitemap(-\w+)?\.xml$" {
            proxy_buffering off;
            proxy_pass $wagtail_origin;
            proxy_set_header Host $wagtail_host;
            proxy_set_header Origin $wagtail_origin;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            proxy_http_version 1.1;
            proxy_ssl_name $wagtail_host;
            proxy_ssl_server_name on;
            proxy_ssl_session_reuse on;
        }

        # RSS feed
        location = /feed {
            # We need to append a trailing slash to the request so that Django doean't trigger a redirect loop
            proxy_pass $wagtail_origin$request_uri/;
            proxy_set_header Host $wagtail_host;
            proxy_set_header Origin $wagtail_origin;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            proxy_http_version 1.1;
            proxy_ssl_name $wagtail_host;
            proxy_ssl_server_name on;
            proxy_ssl_session_reuse on;
        }
        # Proxy 404's to wagtail so that redirects can be added in the CMS
        recursive_error_pages on;
        error_page 404 = @wagtail;
        location @wagtail {
            # We need to ensure there is a trailing slash to the request so that Djando doesn't trigger a redirect loop
            rewrite ^/(.*)/$ /$1 permanent;
            proxy_pass $wagtail_origin$request_uri/;

            proxy_set_header Host $wagtail_host;
            proxy_set_header Origin $wagtail_origin;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            proxy_http_version 1.1;
            proxy_ssl_name $wagtail_host;
            proxy_ssl_server_name on;
            proxy_ssl_session_reuse on;
            error_page 404 = @missing;
        }

        location @missing {
            proxy_pass http://app;
            proxy_intercept_errors off;

            proxy_set_header Host $nuxt_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header Connection "";

            proxy_http_version 1.1;
        }

        # test endpoint
        location /_test {
            include headers.conf;
            add_header Content-Type application/json;
            return 200 '{"status": "ok"}';
        }

        location /_health {
            access_log off;
            return 200;
        }
    }
}